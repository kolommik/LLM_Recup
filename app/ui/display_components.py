import streamlit as st
from typing import Dict, Any
import pandas as pd
from utils.copy_button import copy_button
from utils.common import extract_table_to_dataframe
import csv
import re


def process_text_for_display(text: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ:
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–ª–æ–∫ <NewElements> –≤ –∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–µ–≥–∞–º–∏ NewElements

    Returns:
        str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
    """

    def replace_with_italic(match: re.Match) -> str:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ markdown –∫—É—Ä—Å–∏–≤
        content = match.group(1)
        return f"**NewElements**  \n\n{content}\n---\n"

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ NewElements
    pattern = r"<NewElements>(.*?)</NewElements>"

    # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ –Ω–∞ markdown –∫—É—Ä—Å–∏–≤
    return re.sub(pattern, replace_with_italic, text, flags=re.DOTALL)


def process_text_for_copying(text: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:
    - –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏ <NewElements> –ø–æ–ª–Ω–æ—Å—Ç—å—é

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–µ–≥–∞–º–∏ NewElements

    Returns:
        str: –¢–µ–∫—Å—Ç –±–µ–∑ –±–ª–æ–∫–æ–≤ NewElements
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ NewElements —Ü–µ–ª–∏–∫–æ–º
    pattern = r"<NewElements>.*?</NewElements>"

    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    return re.sub(pattern, "", text, flags=re.DOTALL)


def display_debug_panel():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    if st.toggle("Debug Panel", key="debug_ctrl_toggle"):
        col0, col1, col2 = st.columns(3)
        with col0:
            if st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
                st.rerun()

        with col1:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ api"):
                st.cache_data.clear()

        with col2:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"):
                for key in list(st.session_state.keys()):
                    if key not in ["current_model"]:
                        del st.session_state[key]


def display_usage_stats(stats: Dict[str, Any], key_suffix: str):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

    Parameters:
    -----------
    stats: Dict[str, Any]
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    key_suffix: str
        –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤–∏–¥–∂–µ—Ç–æ–≤
    """
    if st.toggle("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", key=f"cost_toggle_{key_suffix}"):
        col0, col1, col2, col3, col4 = st.columns(5)
        with col0:
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"{100*stats['full_price']:.4f} Rub")
        with col1:
            st.metric("–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", stats["input_tokens"])
        with col2:
            st.metric("–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", stats["output_tokens"])
        with col3:
            st.metric("–¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞", stats["cache_create_tokens"])
        with col4:
            st.metric("–¢–æ–∫–µ–Ω—ã —á—Ç–µ–Ω–∏—è –∫—ç—à–∞", stats["cache_read_tokens"])
        st.divider()


def display_file_upload():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    st.header("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã")
    col1, col2 = st.columns(2)

    with col1:
        uploaded_file = st.file_uploader(
            "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (JSON)",
            type=["json"],
            accept_multiple_files=False,
        )

    with col2:
        terms_file = st.file_uploader(
            "–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ (TXT –∏–ª–∏ MD)",
            type=["txt", "md"],
            accept_multiple_files=False,
        )

    if uploaded_file is not None:
        st.session_state["uploaded_file"] = uploaded_file
        st.success("–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

    if terms_file is not None:
        st.session_state["terms_file"] = terms_file
        st.success("–°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")


def display_participation_stats(df: pd.DataFrame):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤

    Parameters:
    -----------
    df: pd.DataFrame
        DataFrame —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —É—á–∞—Å—Ç–∏—è
    """
    st.header("–£—á–∞—Å—Ç–Ω–∏–∫–∏")
    st.bar_chart(df.set_index("Speaker"))


def display_recognition_errors(df: pd.DataFrame) -> pd.DataFrame:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

    Returns:
    --------
    pd.DataFrame
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—à–∏–±–æ–∫
    """
    st.header("–û—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    edited_df = st.data_editor(
        df,
        key="recognition_errors_editor",
    )
    return edited_df


def display_preprocessed_data():
    with st.expander("–ò—Ç–æ–≥–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", expanded=False):
        # with st.toggle("–®–∞–≥ 1"):
        tab1, tab2, tab3 = st.tabs(
            ["üí¨ –£—á–∞—Å—Ç–Ω–∏–∫–∏", "üìö –î–µ—Ç–∞–ª–∏", "‚ö†Ô∏è –û—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"]
        )

        with tab1:
            st.header("–£—á–∞—Å—Ç–Ω–∏–∫–∏")
            display_usage_stats(st.session_state["stats_analyze_metadata"], "tab1")

            st.bar_chart(st.session_state["df_participation"].set_index("Speaker"))
            st.session_state["topic_and_roles"] = st.text_area(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç",
                value=st.session_state["response_analyze_metadata"],
                height=400,
                disabled=False,
                label_visibility="collapsed",
            )
            copy_button(st.session_state["topic_and_roles"])

        with tab2:
            st.header("–î–µ—Ç–∞–ª–∏ (—É—á–∞—Å—Ç–Ω–∏–∫–∏)")
            display_usage_stats(st.session_state["stats_analyze_speakers"], "tab2")
            st.markdown(st.session_state["response_analyze_speakers"])
            copy_button(st.session_state["response_analyze_speakers"])

        with tab3:
            st.header("–û—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            display_usage_stats(
                st.session_state["stats_analyze_recognition_errors"], "tab3"
            )
            if "recognition_errors" not in st.session_state:
                st.session_state["recognition_errors"] = extract_table_to_dataframe(
                    st.session_state["response_analyze_recognition_errors"]
                )

            edited_df = st.data_editor(
                st.session_state["recognition_errors"],
                key="recognition_errors_editor",
            )
            st.session_state["recognition_errors"] = edited_df
            st.session_state["recognition_errors_txt"] = edited_df.to_csv(
                index=False,
                sep="|",
                quoting=csv.QUOTE_NONE,
            )
            copy_button(st.session_state["recognition_errors_txt"])


def display_summary_results(step_name: str, response: str, stats: Dict[str, Any]):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —à–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Parameters:
    -----------
    step_name: str
        –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞
    response: str
        –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    stats: Dict[str, Any]
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    additional_content: Dict[str, Any], optional
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    with st.expander(step_name, expanded=False):
        st.header(step_name)
        display_usage_stats(stats, f"step_{step_name}")

        st.markdown(process_text_for_display(response))
        copy_button(process_text_for_copying(response))


def display_total_cost(total_cost: float):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Parameters:
    -----------
    total_price: float
        –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    """
    if st.toggle("–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", key="full_price_toggle"):
        st.header("–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{100*total_cost:.4f} Rub")
